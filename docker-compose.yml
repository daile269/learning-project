
services:
  database:
    image: mysql
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 0986341885dai
    ports:
      - "3308:3307"
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_networks
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


  core-service:
    container_name: core-service
    build:
      context: .
      dockerfile: ./core-service/Dockerfile
    ports:
        - "8011:8011"
    environment:
        - DB_USERNAME=root
        - DB_PASSWORD=0986341885dai
        - DB_URL=jdbc:mysql://host.docker.internal:3307//core_service
        - DOCKER_HOST=host.docker.internal
    depends_on:
        database:
          condition: service_healthy
    networks:
        - app_networks

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    ports:
      - "8013:8013"
    environment:
      - DB_USERNAME=root
      - DB_PASSWORD=0986341885dai
      - DB_URL=jdbc:mysql://host.docker.internal:3307//user_service
      - DOCKER_HOST=host.docker.internal
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_networks

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    ports:
      - "8012:8012"
    environment:
      - DOCKER_HOST=host.docker.internal
      - USER_SERVICE_URL=http://user_service:8013
    depends_on:
      - user-service
    networks:
      - app_networks

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      DOCKER_HOST: host.docker.internal
    depends_on:
      - user-service
      - auth-service
      - core-service
    networks:
      - app_networks
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app_networks
  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"

    depends_on:
      - zookeeper
    networks:
      - app_networks
networks:
  app_networks:
    driver: bridge
