

services:
  database:
    image: mysql
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 0986341885dai
    ports:
      - "3308:3307"
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_networks
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


#  core-service:
#    container_name: core-service
#    build:
#      context: .
#      dockerfile: ./core-service/Dockerfile
#    ports:
#        - "8011:8011"
#    environment:
#        - DB_USERNAME=root
#        - DB_PASSWORD=0986341885dai
#        - DB_URL=jdbc:mysql://database:3307/core_service
#        - DOCKER_HOST=host.docker.internal
#    depends_on:
#        database:
#          condition: service_healthy
#    networks:
#        - app_networks
#
#  user-service:
#    container_name: user-service
#    build:
#      context: .
#      dockerfile: ./user-service/Dockerfile
#    ports:
#      - "8013:8013"
#    environment:
#      - DB_USERNAME=root
#      - DB_PASSWORD=0986341885dai
#      - DB_URL=jdbc:mysql://database:3307/user_service
#      - DOCKER_HOST=host.docker.internal
#    depends_on:
#      database:
#        condition: service_healthy
#    networks:
#      - app_networks
#
#  auth-service:
#    container_name: auth-service
#    build:
#      context: .
#      dockerfile: ./auth-service/Dockerfile
#    ports:
#      - "8012:8012"
#    environment:
#      - DOCKER_HOST=host.docker.internal
#      - USER_SERVICE_URL=http://user_service:8013
#    depends_on:
#      - user-service
#    networks:
#      - app_networks
#
#  api-gateway:
#    container_name: api-gateway
#    build:
#      context: .
#      dockerfile: ./api-gateway/Dockerfile
#    ports:
#      - "8080:8080"
#    environment:
#      DOCKER_HOST: host.docker.internal
#    depends_on:
#      - user-service
#      - auth-service
#      - core-service
#    networks:
#      - app_networks
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app_networks
  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"

    depends_on:
      - zookeeper
    networks:
      - app_networks

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:latest
    ports:
      - "7233:7233"
    environment:
      - DB=mysql8
      - DB_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PWD=0986341885dai
      - MYSQL_SEEDS=database
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development_es.yaml
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    depends_on:
      - database

    networks:
      - app_networks

  temporal-admin-tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:latest
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    depends_on:
      - temporal
    stdin_open: true
    tty: true
    networks:
      - app_networks

  temporal-web:
    container_name: temporal-web
    image: temporalio/web:latest
    ports:
      - "8088:8088"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    depends_on:
      - temporal
    networks:
      - app_networks
  keycloak:
    image: quay.io/keycloak/keycloak:26.2.2
    container_name: keycloak
    ports:
      - "8080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command:
      - start-dev
    networks:
      - app_networks
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - app_networks
networks:
  app_networks:
    driver: bridge

volumes:
  redis-data:
    driver: local
